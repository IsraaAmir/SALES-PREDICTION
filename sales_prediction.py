# -*- coding: utf-8 -*-
"""SALES PREDICTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H3om8UrkrwdJ_uLAPB4bQDIobRGniSdJ
"""

# Import packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

advertising = pd.read_csv('/content/advertising.csv')
advertising.head()

advertising.shape

advertising.describe()

"""Data Cleaning"""

# Check for null values and calculate the percentage of missing values for each column
null_percentage = advertising.isnull().sum() * 100 / advertising.shape[0]

# Print the null percentage for each column
print(null_percentage)

# Check if there are any null values in the dataset
if null_percentage.sum() == 0:
    print("The dataset is clean. There are no NULL values.")
else:
    print("The dataset contains some NULL values.")

# Outlier Analysis
# Create a function to generate boxplots
def plot_boxplot(data, column, ax):
    sns.boxplot(data[column], ax=ax)
    ax.set_title(f'Boxplot of {column}')
    ax.set_xlabel(column)

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

# Plot boxplots for 'TV,' 'Newspaper,' and 'Radio' columns
plot_boxplot(advertising, 'TV', axs[0])
plot_boxplot(advertising, 'Newspaper', axs[1])
plot_boxplot(advertising, 'Radio', axs[2])

# Adjust layout for better visualization
plt.tight_layout()

# Show the plots
plt.show()

"""Exploratory Data Analysis"""

sns.boxplot(advertising['Sales'])
plt.show()

# Define the variables for the pairplot
x_variables = ['TV', 'Newspaper', 'Radio']
y_variable = 'Sales'

# Create a pairplot to visualize relationships
sns.pairplot(advertising, x_vars=x_variables, y_vars=y_variable, height=4, aspect=1, kind='scatter')

# Add titles and labels
plt.suptitle(f"Pairplot of {y_variable} vs. {', '.join(x_variables)}")
plt.xlabel(', '.join(x_variables))
plt.ylabel(y_variable)

# Show the plot
plt.show()

"""Model Building"""

X = advertising['TV']
y = advertising['Sales']

X = X.values.reshape(-1, 1)
y = y.values.reshape(-1, 1)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state = 100)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Create a linear regression model
model = LinearRegression()

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the model's performance metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print the model's coefficients and performance metrics
print(f'Coefficients: {model.coef_}')
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Plot the actual vs. predicted sales
plt.scatter(X_test, y_test, color='blue')
plt.plot(X_test, y_pred, color='red', linewidth=2)
plt.xlabel('Advertising Expenditure')
plt.ylabel('Sales')
plt.title('Actual vs. Predicted Sales')
plt.show()



